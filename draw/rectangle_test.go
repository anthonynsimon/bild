package draw

import (
	"image"
	"image/color"
	"reflect"
	"testing"
)

func TestDrawFillRectangle(t *testing.T) {
	type args struct {
		img image.Image
		r   Rectangle
	}
	tests := []struct {
		name string
		args args
		want *image.RGBA
	}{
		{
			name: "Draw rect",
			args: args{
				img: &image.RGBA{
					Stride: 4 * 4,
					Rect:   image.Rect(0, 0, 4, 4),
					Pix: []uint8{
						0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
						0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
						0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
						0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
					},
				},
				r: Rectangle{
					TopLeft: image.Point{
						X: 0,
						Y: 0,
					},
					BottomRight: image.Point{
						X: 1,
						Y: 1,
					},
					FillColor: color.White,
				},
			},
			want: &image.RGBA{
				Stride: 4 * 4,
				Rect:   image.Rect(0, 0, 4, 4),
				Pix: []uint8{
					0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff,
					0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff,
					0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
					0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := FillRectangle(tt.args.img, tt.args.r); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DrawFillRectangle() = %v, want %v", got, tt.want)
			}
		})
	}
}
